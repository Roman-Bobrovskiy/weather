{"ast":null,"code":"let timeLastUpdate = data => {\n  let Data = new Date(data * 1000); // let Data = new Date();\n\n  let Year = Data.getFullYear();\n  let Month = Data.getMonth();\n  let Day = Data.getDate();\n  let Hour = Data.getHours();\n  let Minutes = Data.getMinutes();\n  let result = `${Year}.${Month < 10 ? \"0\" + Month : Month}.${Day < 10 ? \"0\" + Day : Day} at ${Hour}:${Minutes < 10 ? \"0\" + Minutes : Minutes}`;\n  return result;\n};\n\nlet timeWeekDay = data => {\n  let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  let Data = new Date(data * 1000);\n  let Day = Data.getDay();\n  let Hour = Data.getHours();\n  let Minutes = Data.getMinutes();\n  let result = `${days[Day]} ${Hour}:${Minutes < 10 ? \"0\" + Minutes : Minutes}`;\n  return result;\n};\n\nlet time = data => {\n  let Data = new Date(data * 1000);\n  let Hour = Data.getHours();\n  let Minutes = Data.getMinutes();\n  let result = `${Hour}:${Minutes < 10 ? \"0\" + Minutes : Minutes}`;\n  return result;\n};\n\nlet lengthOfTheDay = (sunrise, sunset) => {\n  let different = new Date(sunset) - new Date(sunrise);\n  let Data = new Date(different * 1000);\n  let Hour = Data.getHours() - 3;\n  let Minutes = Data.getMinutes();\n  let result = `${Hour}:${Minutes < 10 ? \"0\" + Minutes : Minutes}`;\n  return result;\n};\n\nlet timeCounter = {\n  timeLastUpdate,\n  timeWeekDay,\n  time,\n  lengthOfTheDay\n};\nexport default timeCounter;","map":{"version":3,"sources":["/home/rb/React/weather/src/utils/getTime.js"],"names":["timeLastUpdate","data","Data","Date","Year","getFullYear","Month","getMonth","Day","getDate","Hour","getHours","Minutes","getMinutes","result","timeWeekDay","days","getDay","time","lengthOfTheDay","sunrise","sunset","different","timeCounter"],"mappings":"AAAA,IAAIA,cAAc,GAAIC,IAAD,IAAU;AAC7B,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,IAAI,GAAG,IAAhB,CAAX,CAD6B,CAE7B;;AACA,MAAIG,IAAI,GAAGF,IAAI,CAACG,WAAL,EAAX;AACA,MAAIC,KAAK,GAAGJ,IAAI,CAACK,QAAL,EAAZ;AACA,MAAIC,GAAG,GAAGN,IAAI,CAACO,OAAL,EAAV;AACA,MAAIC,IAAI,GAAGR,IAAI,CAACS,QAAL,EAAX;AACA,MAAIC,OAAO,GAAGV,IAAI,CAACW,UAAL,EAAd;AAEA,MAAIC,MAAM,GAAI,GAAEV,IAAK,IAAGE,KAAK,GAAG,EAAR,GAAa,MAAMA,KAAnB,GAA2BA,KAAM,IACvDE,GAAG,GAAG,EAAN,GAAW,MAAMA,GAAjB,GAAuBA,GACxB,OAAME,IAAK,IAAGE,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAQ,EAFtD;AAGA,SAAOE,MAAP;AACD,CAbD;;AAeA,IAAIC,WAAW,GAAId,IAAD,IAAU;AAC1B,MAAIe,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAX;AACA,MAAId,IAAI,GAAG,IAAIC,IAAJ,CAASF,IAAI,GAAG,IAAhB,CAAX;AACA,MAAIO,GAAG,GAAGN,IAAI,CAACe,MAAL,EAAV;AACA,MAAIP,IAAI,GAAGR,IAAI,CAACS,QAAL,EAAX;AACA,MAAIC,OAAO,GAAGV,IAAI,CAACW,UAAL,EAAd;AACA,MAAIC,MAAM,GAAI,GAAEE,IAAI,CAACR,GAAD,CAAM,IAAGE,IAAK,IAAGE,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAQ,EAA5E;AACA,SAAOE,MAAP;AACD,CARD;;AAUA,IAAII,IAAI,GAAIjB,IAAD,IAAU;AACnB,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,IAAI,GAAG,IAAhB,CAAX;AACA,MAAIS,IAAI,GAAGR,IAAI,CAACS,QAAL,EAAX;AACA,MAAIC,OAAO,GAAGV,IAAI,CAACW,UAAL,EAAd;AAEA,MAAIC,MAAM,GAAI,GAAEJ,IAAK,IAAGE,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAQ,EAA/D;AACA,SAAOE,MAAP;AACD,CAPD;;AASA,IAAIK,cAAc,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACxC,MAAIC,SAAS,GAAG,IAAInB,IAAJ,CAASkB,MAAT,IAAmB,IAAIlB,IAAJ,CAASiB,OAAT,CAAnC;AACA,MAAIlB,IAAI,GAAG,IAAIC,IAAJ,CAASmB,SAAS,GAAG,IAArB,CAAX;AACA,MAAIZ,IAAI,GAAGR,IAAI,CAACS,QAAL,KAAkB,CAA7B;AACA,MAAIC,OAAO,GAAGV,IAAI,CAACW,UAAL,EAAd;AAEA,MAAIC,MAAM,GAAI,GAAEJ,IAAK,IAAGE,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAQ,EAA/D;AAEA,SAAOE,MAAP;AACD,CATD;;AAWA,IAAIS,WAAW,GAAG;AAChBvB,EAAAA,cADgB;AAEhBe,EAAAA,WAFgB;AAGhBG,EAAAA,IAHgB;AAIhBC,EAAAA;AAJgB,CAAlB;AAOA,eAAeI,WAAf","sourcesContent":["let timeLastUpdate = (data) => {\n  let Data = new Date(data * 1000);\n  // let Data = new Date();\n  let Year = Data.getFullYear();\n  let Month = Data.getMonth();\n  let Day = Data.getDate();\n  let Hour = Data.getHours();\n  let Minutes = Data.getMinutes();\n\n  let result = `${Year}.${Month < 10 ? \"0\" + Month : Month}.${\n    Day < 10 ? \"0\" + Day : Day\n  } at ${Hour}:${Minutes < 10 ? \"0\" + Minutes : Minutes}`;\n  return result;\n};\n\nlet timeWeekDay = (data) => {\n  let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  let Data = new Date(data * 1000);\n  let Day = Data.getDay();\n  let Hour = Data.getHours();\n  let Minutes = Data.getMinutes();\n  let result = `${days[Day]} ${Hour}:${Minutes < 10 ? \"0\" + Minutes : Minutes}`;\n  return result;\n};\n\nlet time = (data) => {\n  let Data = new Date(data * 1000);\n  let Hour = Data.getHours();\n  let Minutes = Data.getMinutes();\n\n  let result = `${Hour}:${Minutes < 10 ? \"0\" + Minutes : Minutes}`;\n  return result;\n};\n\nlet lengthOfTheDay = (sunrise, sunset) => {\n  let different = new Date(sunset) - new Date(sunrise);\n  let Data = new Date(different * 1000);\n  let Hour = Data.getHours() - 3;\n  let Minutes = Data.getMinutes();\n\n  let result = `${Hour}:${Minutes < 10 ? \"0\" + Minutes : Minutes}`;\n\n  return result;\n};\n\nlet timeCounter = {\n  timeLastUpdate,\n  timeWeekDay,\n  time,\n  lengthOfTheDay,\n};\n\nexport default timeCounter;\n"]},"metadata":{},"sourceType":"module"}