{"ast":null,"code":"var _jsxFileName = \"/home/rb/React/weather/src/components/HourlyWeather/HourlyWeather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actionsTypes from \"../../redux/weather/weatherActions\";\nimport requests from \"../../utils/request\";\nimport url from \"../../utils/path.json\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { getTempInCelsius } from \"../../utils/getTempInCelsius\";\nimport wind from \"../../utils/getWindDirection\";\nimport timeCounter from \"../../utils/getTime\";\nimport Arrow from \"../Arrow/Arrow\";\nimport TempBox from \"../../components/TempBox/TempBox\";\nimport scroll from \"../../utils/hScroll\";\nimport styles from \"./HourlyWeather.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CityPageHorly(_ref) {\n  _s();\n\n  let {\n    id,\n    cityData,\n    card,\n    pageWeather,\n    err,\n    loading\n  } = _ref;\n  //get data object for city page\n  useEffect(() => {\n    card.map(obj => id === obj.id && cityData.length === 0 && requests.getCityPageData(obj.coord.lon, obj.coord.lat).then(loading(true)).then(elem => pageWeather({ ...elem.data,\n      name: obj.name,\n      id: id\n    })).catch(error => err(error.message)).finally(() => loading(false)));\n  }, [pageWeather, id, card, cityData.length, err, loading]); //clean state\n\n  useEffect(() => {\n    pageWeather([]);\n  }, [pageWeather]);\n  return (\n    /*#__PURE__*/\n    //body hourly weather box\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.wrapHourlyWeather,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onWheel: e => scroll.hScroll(e),\n          id: \"scroll_container\",\n          className: styles.wrapCards,\n          children: cityData.length !== 0 && cityData.hourly.map(elem => /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: styles.hourlyWeatherCard,\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              className: styles.cardList,\n              children: timeCounter.timeWeekDay(elem.dt)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: styles.cardList,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: url.imgUrl + elem.weather[0].icon + \".png\",\n                alt: elem.weather[0].main\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: styles.boxTempCardItem,\n              children: /*#__PURE__*/_jsxDEV(TempBox, {\n                temp: getTempInCelsius(elem.temp)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: styles.cardList,\n              children: [\"Feels like \", getTempInCelsius(elem.feels_like), \" \\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: styles.cardList,\n              children: [/*#__PURE__*/_jsxDEV(Arrow, {\n                deg: elem.wind_deg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this), wind.speed(elem.wind_speed), \" m/s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: styles.cardList,\n              children: [\"gusts to \", wind.speed(elem.wind_gust), \" m/s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)]\n          }, uuidv4(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  );\n}\n\n_s(CityPageHorly, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = CityPageHorly;\n\nlet mapStateToProps = state => {\n  return state.weather;\n};\n\nlet mapDispatchToProps = {\n  pageWeather: actionsTypes.cityPageWeather,\n  handleSubmit: actionsTypes.getCityData,\n  err: actionsTypes.error,\n  loading: actionsTypes.loading\n};\nCityPageHorly.propTypes = {\n  id: PropTypes.number,\n  card: PropTypes.array,\n  pageWeather: PropTypes.func.isRequired,\n  err: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(CityPageHorly);\n\nvar _c;\n\n$RefreshReg$(_c, \"CityPageHorly\");","map":{"version":3,"sources":["/home/rb/React/weather/src/components/HourlyWeather/HourlyWeather.js"],"names":["React","useEffect","PropTypes","connect","actionsTypes","requests","url","v4","uuidv4","getTempInCelsius","wind","timeCounter","Arrow","TempBox","scroll","styles","CityPageHorly","id","cityData","card","pageWeather","err","loading","map","obj","length","getCityPageData","coord","lon","lat","then","elem","data","name","catch","error","message","finally","wrapHourlyWeather","e","hScroll","wrapCards","hourly","hourlyWeatherCard","cardList","timeWeekDay","dt","imgUrl","weather","icon","main","boxTempCardItem","temp","feels_like","wind_deg","speed","wind_speed","wind_gust","mapStateToProps","state","mapDispatchToProps","cityPageWeather","handleSubmit","getCityData","propTypes","number","array","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actionsTypes from \"../../redux/weather/weatherActions\";\n\nimport requests from \"../../utils/request\";\nimport url from \"../../utils/path.json\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { getTempInCelsius } from \"../../utils/getTempInCelsius\";\nimport wind from \"../../utils/getWindDirection\";\nimport timeCounter from \"../../utils/getTime\";\nimport Arrow from \"../Arrow/Arrow\";\nimport TempBox from \"../../components/TempBox/TempBox\";\nimport scroll from \"../../utils/hScroll\";\n\nimport styles from \"./HourlyWeather.module.css\";\n\nfunction CityPageHorly({ id, cityData, card, pageWeather, err, loading }) {\n  //get data object for city page\n  useEffect(() => {\n    card.map(\n      (obj) =>\n        id === obj.id &&\n        cityData.length === 0 &&\n        requests\n          .getCityPageData(obj.coord.lon, obj.coord.lat)\n          .then(loading(true))\n          .then((elem) => pageWeather({ ...elem.data, name: obj.name, id: id }))\n          .catch((error) => err(error.message))\n          .finally(() => loading(false))\n    );\n  }, [pageWeather, id, card, cityData.length, err, loading]);\n\n  //clean state\n  useEffect(() => {\n    pageWeather([]);\n  }, [pageWeather]);\n\n  return (\n    //body hourly weather box\n    <>\n      <div className={styles.wrapHourlyWeather}>\n        <div\n          onWheel={(e) => scroll.hScroll(e)}\n          id=\"scroll_container\"\n          className={styles.wrapCards}\n        >\n          {cityData.length !== 0 &&\n            cityData.hourly.map((elem) => (\n              <ul key={uuidv4()} className={styles.hourlyWeatherCard}>\n                <li className={styles.cardList}>\n                  {timeCounter.timeWeekDay(elem.dt)}\n                </li>\n                <li className={styles.cardList}>\n                  <img\n                    src={url.imgUrl + elem.weather[0].icon + \".png\"}\n                    alt={elem.weather[0].main}\n                  ></img>\n                </li>\n                <li className={styles.boxTempCardItem}>\n                  <TempBox temp={getTempInCelsius(elem.temp)} />\n                </li>\n                <li className={styles.cardList}>\n                  Feels like {getTempInCelsius(elem.feels_like)} °C\n                </li>\n                <li className={styles.cardList}>\n                  <Arrow deg={elem.wind_deg} />\n                  {wind.speed(elem.wind_speed)} m/s\n                </li>\n                <li className={styles.cardList}>\n                  gusts to {wind.speed(elem.wind_gust)} m/s\n                </li>\n              </ul>\n            ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nlet mapStateToProps = (state) => {\n  return state.weather;\n};\n\nlet mapDispatchToProps = {\n  pageWeather: actionsTypes.cityPageWeather,\n  handleSubmit: actionsTypes.getCityData,\n  err: actionsTypes.error,\n  loading: actionsTypes.loading,\n};\n\nCityPageHorly.propTypes = {\n  id: PropTypes.number,\n  card: PropTypes.array,\n  pageWeather: PropTypes.func.isRequired,\n  err: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CityPageHorly);\n"]},"metadata":{},"sourceType":"module"}