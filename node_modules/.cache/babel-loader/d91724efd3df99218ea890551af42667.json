{"ast":null,"code":"var _jsxFileName = \"/home/rb/React/weather/src/components/SearchForm/SearchForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actionsTypes from \"../../redux/weather/weatherActions\";\nimport requests from \"../../utils/request\";\nimport styles from \"./SearchForm.module.css\";\nimport ModalWindow from \"../Modal/ModalWindow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SearchForm(_ref) {\n  _s();\n\n  let {\n    handleSubmit,\n    err,\n    loading\n  } = _ref;\n  const [text, setText] = useState(\"\"); //get local stoeage data for cards\n\n  useEffect(() => {\n    let localStorageData = JSON.parse(window.localStorage.getItem(\"city\")) || [];\n    localStorageData.map(obj => requests.getData(obj).then(elem => handleSubmit({ ...elem.data\n    })).catch(error => err(true)).finally(() => loading(false)));\n  }, [handleSubmit, err, loading]);\n\n  let handleChange = event => {\n    setText(event.target.value);\n  }; //add new cards\n\n\n  let onhandleSubmit = event => {\n    loading(true);\n    event.preventDefault();\n    requests.getData(text).then(elem => handleSubmit({ ...elem.data\n    })).catch(error => err(true)).finally(() => loading(false));\n    setText(\"\");\n  };\n\n  return (\n    /*#__PURE__*/\n    // search\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ModalWindow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: styles.searchFrom,\n        onSubmit: onhandleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.searchInput,\n          type: \"text\",\n          value: text,\n          onChange: handleChange,\n          placeholder: \"Search city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.searchBtn,\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(SearchForm, \"mMfSPvg3kjJBAgiHJD0l85bq0UA=\");\n\n_c = SearchForm;\n\nlet mapStateToProps = state => {\n  return {\n    state\n  };\n};\n\nlet mapDispatchToProps = {\n  handleSubmit: actionsTypes.getCityData,\n  err: actionsTypes.error,\n  loading: actionsTypes.loading\n};\nSearchForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  err: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchForm\");","map":{"version":3,"sources":["/home/rb/React/weather/src/components/SearchForm/SearchForm.js"],"names":["React","useState","useEffect","PropTypes","connect","actionsTypes","requests","styles","ModalWindow","SearchForm","handleSubmit","err","loading","text","setText","localStorageData","JSON","parse","window","localStorage","getItem","map","obj","getData","then","elem","data","catch","error","finally","handleChange","event","target","value","onhandleSubmit","preventDefault","searchFrom","searchInput","searchBtn","mapStateToProps","state","mapDispatchToProps","getCityData","propTypes","func","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,WAAP,MAAwB,sBAAxB;;;;AAEA,SAASC,UAAT,OAAoD;AAAA;;AAAA,MAAhC;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,GAAhB;AAAqBC,IAAAA;AAArB,GAAgC;AAClD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC,CADkD,CAGlD;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,gBAAgB,GAClBC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAX,KAAmD,EADrD;AAGAL,IAAAA,gBAAgB,CAACM,GAAjB,CAAsBC,GAAD,IACnBhB,QAAQ,CACLiB,OADH,CACWD,GADX,EAEGE,IAFH,CAESC,IAAD,IAAUf,YAAY,CAAC,EAAE,GAAGe,IAAI,CAACC;AAAV,KAAD,CAF9B,EAGGC,KAHH,CAGUC,KAAD,IAAWjB,GAAG,CAAC,IAAD,CAHvB,EAIGkB,OAJH,CAIW,MAAMjB,OAAO,CAAC,KAAD,CAJxB,CADF;AAOD,GAXQ,EAWN,CAACF,YAAD,EAAeC,GAAf,EAAoBC,OAApB,CAXM,CAAT;;AAaA,MAAIkB,YAAY,GAAIC,KAAD,IAAW;AAC5BjB,IAAAA,OAAO,CAACiB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,GAFD,CAjBkD,CAqBlD;;;AACA,MAAIC,cAAc,GAAIH,KAAD,IAAW;AAC9BnB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAmB,IAAAA,KAAK,CAACI,cAAN;AACA7B,IAAAA,QAAQ,CACLiB,OADH,CACWV,IADX,EAEGW,IAFH,CAESC,IAAD,IAAUf,YAAY,CAAC,EAAE,GAAGe,IAAI,CAACC;AAAV,KAAD,CAF9B,EAGGC,KAHH,CAGUC,KAAD,IAAWjB,GAAG,CAAC,IAAD,CAHvB,EAIGkB,OAJH,CAIW,MAAMjB,OAAO,CAAC,KAAD,CAJxB;AAMAE,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAVD;;AAYA;AAAA;AACE;AACA;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,SAAS,EAAEP,MAAM,CAAC6B,UAAxB;AAAoC,QAAA,QAAQ,EAAEF,cAA9C;AAAA,gCACE;AACE,UAAA,SAAS,EAAE3B,MAAM,CAAC8B,WADpB;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,KAAK,EAAExB,IAHT;AAIE,UAAA,QAAQ,EAAEiB,YAJZ;AAKE,UAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AAAQ,UAAA,SAAS,EAAEvB,MAAM,CAAC+B,SAA1B;AAAqC,UAAA,IAAI,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAFF;AAmBD;;GArDQ7B,U;;KAAAA,U;;AAuDT,IAAI8B,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACLA,IAAAA;AADK,GAAP;AAGD,CAJD;;AAMA,IAAIC,kBAAkB,GAAG;AACvB/B,EAAAA,YAAY,EAAEL,YAAY,CAACqC,WADJ;AAEvB/B,EAAAA,GAAG,EAAEN,YAAY,CAACuB,KAFK;AAGvBhB,EAAAA,OAAO,EAAEP,YAAY,CAACO;AAHC,CAAzB;AAMAH,UAAU,CAACkC,SAAX,GAAuB;AACrBjC,EAAAA,YAAY,EAAEP,SAAS,CAACyC,IAAV,CAAeC,UADR;AAErBlC,EAAAA,GAAG,EAAER,SAAS,CAACyC,IAAV,CAAeC,UAFC;AAGrBjC,EAAAA,OAAO,EAAET,SAAS,CAACyC,IAAV,CAAeC;AAHH,CAAvB;AAMA,eAAezC,OAAO,CAACmC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChC,UAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actionsTypes from \"../../redux/weather/weatherActions\";\nimport requests from \"../../utils/request\";\nimport styles from \"./SearchForm.module.css\";\n\nimport ModalWindow from \"../Modal/ModalWindow\";\n\nfunction SearchForm({ handleSubmit, err, loading }) {\n  const [text, setText] = useState(\"\");\n\n  //get local stoeage data for cards\n  useEffect(() => {\n    let localStorageData =\n      JSON.parse(window.localStorage.getItem(\"city\")) || [];\n\n    localStorageData.map((obj) =>\n      requests\n        .getData(obj)\n        .then((elem) => handleSubmit({ ...elem.data }))\n        .catch((error) => err(true))\n        .finally(() => loading(false))\n    );\n  }, [handleSubmit, err, loading]);\n\n  let handleChange = (event) => {\n    setText(event.target.value);\n  };\n\n  //add new cards\n  let onhandleSubmit = (event) => {\n    loading(true);\n    event.preventDefault();\n    requests\n      .getData(text)\n      .then((elem) => handleSubmit({ ...elem.data }))\n      .catch((error) => err(true))\n      .finally(() => loading(false));\n\n    setText(\"\");\n  };\n\n  return (\n    // search\n    <>\n      <ModalWindow />\n      <form className={styles.searchFrom} onSubmit={onhandleSubmit}>\n        <input\n          className={styles.searchInput}\n          type=\"text\"\n          value={text}\n          onChange={handleChange}\n          placeholder=\"Search city\"\n        ></input>\n\n        <button className={styles.searchBtn} type=\"submit\">\n          Search\n        </button>\n      </form>\n    </>\n  );\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    state,\n  };\n};\n\nlet mapDispatchToProps = {\n  handleSubmit: actionsTypes.getCityData,\n  err: actionsTypes.error,\n  loading: actionsTypes.loading,\n};\n\nSearchForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  err: PropTypes.func.isRequired,\n  loading: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\n"]},"metadata":{},"sourceType":"module"}